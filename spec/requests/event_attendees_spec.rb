# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/event_attendees" do
  let(:event_attendee) { create :event_attendee }

  let(:user) { nil }

  before(:each) do
    sign_in user if user
  end

  describe "GET /index" do
    subject(:get_index) { get event_attendees_url, params: }

    let(:params) { { format: :json } }
    let(:user) { create :user }
    let(:profile) { create :profile, user: }

    context "without event_id parameter" do
      let!(:event_attendee) { create :event_attendee, profile: }
      let!(:other_event_attendee) { create :event_attendee }

      it "returns your event attendees" do
        get_index
        expect(json_body["event_attendees"].pluck("profile_id")).to include(event_attendee.profile_id)
      end

      it "don't render other users records" do
        get_index
        expect(json_body["event_attendees"].pluck("profile_id")).not_to include(other_event_attendee.profile_id)
      end

      it "includes pagination links" do
        get_index
        expect(json_body).to have_key("links")
      end
    end

    context "with event_id parameter", :aggregate_failures do
      let(:event) { create :event }
      let!(:event_attendee) { create :event_attendee, event:, profile: create(:profile, visibility: "everyone") }
      let!(:other_event_attendee) { create :event_attendee }
      let(:params) { { format: :json, event_id: event.id } }

      it "returns attendees for the specified event", :aggregate_failures do
        get_index
        event_attendees = json_body["event_attendees"]
        expect(event_attendees.length).to eq 1
        expect(event_attendees.pluck("id")).to include event_attendee.id
        expect(event_attendees.pluck("id")).not_to include other_event_attendee.id
      end

      it "includes pagination links" do
        get_index
        expect(json_body).to have_key("links")
      end

      context "with different profile visibilities", :aggregate_failures do
        let(:friend) { create :profile, visibility: "friends" }
        let!(:friendship) { create :friendship, buddy: friend, friend: profile, status: "accepted" }
        let(:stranger) { create :profile, visibility: "friends" }
        let!(:everyone_attendee) { create :event_attendee, event:, profile: create(:profile, visibility: "everyone") }
        let!(:authenticated_attendee) do
          create :event_attendee, event:, profile: create(:profile, visibility: "authenticated")
        end
        let!(:friends_attendee) { create :event_attendee, event:, profile: friend }
        let!(:stranger_attendee) { create :event_attendee, event:, profile: stranger }
        let!(:myself_attendee) { create :event_attendee, event:, profile: create(:profile, visibility: "myself") }

        it "respects profile visibility settings", :aggregate_failures do
          get_index
          event_attendee_ids = json_body["event_attendees"].pluck("id")

          expect(event_attendee_ids.count).to eq 4
          expect(event_attendee_ids).to include(event_attendee.id)
          expect(event_attendee_ids).to include(everyone_attendee.id)
          expect(event_attendee_ids).to include(authenticated_attendee.id)
          expect(event_attendee_ids).to include(friends_attendee.id)
          expect(event_attendee_ids).not_to include(stranger_attendee.id)
          expect(event_attendee_ids).not_to include(myself_attendee.id)
        end
      end
    end

    context "with 10+ records" do
      let!(:event_attendee) { create_list :event_attendee, 6, profile: }

      it "paginates the results", :aggregate_failures do
        get_index
        event_attendees = json_body["event_attendees"]
        links = json_body["links"]
        expect(event_attendees.count).to eq 5
        expect(links["first"]).to eq "http://www.example.com/event_attendees?format=json&page%5Bnumber%5D=1&page%5Blimit%5D=5"
        expect(links["last"]).to eq "http://www.example.com/event_attendees?format=json&page%5Bnumber%5D=2&page%5Blimit%5D=5"
        expect(links["prev"]).to be_nil
        expect(links["next"]).to eq "http://www.example.com/event_attendees?format=json&page%5Bnumber%5D=2&page%5Blimit%5D=5"
      end

      context "when on second page" do
        let(:params) { { format: :json, page: { number: 2 } } }

        it "paginates the results", :aggregate_failures do
          get_index
          event_attendees = json_body["event_attendees"]
          links = json_body["links"]
          expect(event_attendees.count).to eq 1
          expect(links["first"]).to eq "http://www.example.com/event_attendees?format=json&page%5Bnumber%5D=1&page%5Blimit%5D=5"
          expect(links["last"]).to eq "http://www.example.com/event_attendees?format=json&page%5Bnumber%5D=2&page%5Blimit%5D=5"
          expect(links["prev"]).to eq "http://www.example.com/event_attendees?format=json&page%5Bnumber%5D=1&page%5Blimit%5D=5"
          expect(links["next"]).to be_nil
        end
      end
    end
  end

  describe "GET /show" do
    subject(:get_show) { get event_attendee_url(event_attendee) }

    include_examples "unauthorized access"

    context "with your event attendee" do
      let(:user) { create :user }
      let(:profile) { create :profile, user: }
      let(:event_attendee) { create :event_attendee, profile: }

      it "renders a successful response" do
        get_show
        expect(response).to be_successful
      end
    end
  end

  describe "GET /edit" do
    subject(:get_edit) { get edit_event_attendee_url(event_attendee) }

    include_examples "redirect to sign in"
  end

  describe "POST /create" do
    subject(:post_create) { post event_attendees_url, params: { event_attendee: attributes } }

    context "with valid parameters" do
      let(:profile) { create :profile }
      let(:event) { create :event }
      let(:attributes) do
        {
          profile_id: profile.id,
          event_id: event.id
        }
      end

      include_examples "redirect to sign in"

      context "when user does not match profile" do
        let(:user) { create :user }

        include_examples "unauthorized access"
      end

      context "when user matches profile" do
        let(:user) { profile.user }

        it "creates a new EventAttendee" do
          expect { post_create }.to change(EventAttendee, :count).by(1)
        end

        it "schedules an email" do
          post_create
          event_attendee = EventAttendee.find_by(event:, profile:)
          expect(event_attendee.email_scheduled_on).not_to be_nil
        end

        it "redirects to the created event_attendee" do
          post_create
          expect(response).to redirect_to(event_attendee_url(EventAttendee.last))
        end
      end

      context "when user matches profile but is overdue on email confirmation" do
        let(:user) { create :user, :overdue_unconfirmed }
        let(:profile) { create :profile, user: }

        it_behaves_like "confirm your email"
      end

      context "when user matches profile and is unconfirmed" do
        let(:user) { create :user, :unconfirmed_with_trial }
        let(:profile) { create :profile, user: }

        it "creates a new EventAttendee" do
          expect { post_create }.to change(EventAttendee, :count).by(1)
        end

        it "redirects to the created event_attendee" do
          post_create
          expect(response).to redirect_to(event_attendee_url(EventAttendee.last))
        end
      end
    end

    context "with invalid parameters and valid user" do
      let(:attributes) { { profile_id: profile.id } }
      let(:profile) { create :profile }
      let(:user) { profile.user }

      it "does not create a new EventAttendee" do
        expect { post_create }.not_to change(EventAttendee, :count)
      end

      it "returns an unprocessable entity code" do
        post_create
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    subject(:patch_update) { patch event_attendee_url(event_attendee), params: { event_attendee: attributes } }

    let(:event_attendee) { create :event_attendee }

    context "with valid parameters" do
      let(:attributes) do
        { event_id: create(:event, name: "StrangeLoop").id }
      end

      include_examples "redirect to sign in"

      context "when user does not match profile" do
        let(:user) { create :user }

        include_examples "unauthorized access"
      end
    end
  end

  describe "DELETE /destroy" do
    subject(:delete_destroy) { delete event_attendee_url(event_attendee) }

    let!(:event_attendee) { create :event_attendee }

    include_examples "redirect to sign in"

    context "when unrelated user" do
      let(:user) { create :user }

      include_examples "unauthorized access"

      it "does not allow folks to delete others event attendance" do
        delete_destroy
        expect(event_attendee.id).to eq event_attendee.reload.id
      end
    end

    context "when user matches profile" do
      let(:user) { event_attendee.profile.user }

      it "destroys the requested event_attendee" do
        expect { delete_destroy }.to change(EventAttendee, :count).by(-1)
      end

      it "redirects to the event_attendees list" do
        delete_destroy
        expect(response).to redirect_to(event_attendees_url)
      end
    end
  end
end
